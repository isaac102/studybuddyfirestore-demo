{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-console */\nimport { SDK_VERSION } from '../core/version';\nimport { PlatformSupport } from '../platform/platform';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\nvar logClient = new Logger('@firebase/firestore');\nexport var LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogLevel[LogLevel[\"ERROR\"] = 1] = \"ERROR\";\n  LogLevel[LogLevel[\"SILENT\"] = 2] = \"SILENT\";\n})(LogLevel || (LogLevel = {})); // Helper methods are needed because variables can't be exported as read/write\n\n\nexport function getLogLevel() {\n  if (logClient.logLevel === FirebaseLogLevel.DEBUG) {\n    return LogLevel.DEBUG;\n  } else if (logClient.logLevel === FirebaseLogLevel.SILENT) {\n    return LogLevel.SILENT;\n  } else {\n    return LogLevel.ERROR;\n  }\n}\nexport function setLogLevel(newLevel) {\n  /**\n   * Map the new log level to the associated Firebase Log Level\n   */\n  switch (newLevel) {\n    case LogLevel.DEBUG:\n      logClient.logLevel = FirebaseLogLevel.DEBUG;\n      break;\n\n    case LogLevel.ERROR:\n      logClient.logLevel = FirebaseLogLevel.ERROR;\n      break;\n\n    case LogLevel.SILENT:\n      logClient.logLevel = FirebaseLogLevel.SILENT;\n      break;\n\n    default:\n      logClient.error(\"Firestore (\" + SDK_VERSION + \"): Invalid value passed to `setLogLevel`\");\n  }\n}\nexport function debug(tag, msg) {\n  var obj = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    obj[_i - 2] = arguments[_i];\n  }\n\n  if (logClient.logLevel <= FirebaseLogLevel.DEBUG) {\n    var args = obj.map(argToString);\n    logClient.debug.apply(logClient, [\"Firestore (\" + SDK_VERSION + \") [\" + tag + \"]: \" + msg].concat(args));\n  }\n}\nexport function error(msg) {\n  var obj = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    obj[_i - 1] = arguments[_i];\n  }\n\n  if (logClient.logLevel <= FirebaseLogLevel.ERROR) {\n    var args = obj.map(argToString);\n    logClient.error.apply(logClient, [\"Firestore (\" + SDK_VERSION + \"): \" + msg].concat(args));\n  }\n}\n/**\n * Converts an additional log parameter to a string representation.\n */\n\nfunction argToString(obj) {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    var platform = PlatformSupport.getPlatform();\n\n    try {\n      return platform.formatJSON(obj);\n    } catch (e) {\n      // Converting to JSON failed, just log the object directly\n      return obj;\n    }\n  }\n}","map":{"version":3,"sources":["../src/util/log.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-console */\n\nimport { SDK_VERSION } from '../core/version';\nimport { AnyJs } from './misc';\nimport { PlatformSupport } from '../platform/platform';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\n\nconst logClient = new Logger('@firebase/firestore');\n\nexport enum LogLevel {\n  DEBUG,\n  ERROR,\n  SILENT\n}\n\n// Helper methods are needed because variables can't be exported as read/write\nexport function getLogLevel(): LogLevel {\n  if (logClient.logLevel === FirebaseLogLevel.DEBUG) {\n    return LogLevel.DEBUG;\n  } else if (logClient.logLevel === FirebaseLogLevel.SILENT) {\n    return LogLevel.SILENT;\n  } else {\n    return LogLevel.ERROR;\n  }\n}\nexport function setLogLevel(newLevel: LogLevel): void {\n  /**\n   * Map the new log level to the associated Firebase Log Level\n   */\n  switch (newLevel) {\n    case LogLevel.DEBUG:\n      logClient.logLevel = FirebaseLogLevel.DEBUG;\n      break;\n    case LogLevel.ERROR:\n      logClient.logLevel = FirebaseLogLevel.ERROR;\n      break;\n    case LogLevel.SILENT:\n      logClient.logLevel = FirebaseLogLevel.SILENT;\n      break;\n    default:\n      logClient.error(\n        `Firestore (${SDK_VERSION}): Invalid value passed to \\`setLogLevel\\``\n      );\n  }\n}\n\nexport function debug(tag: string, msg: string, ...obj: AnyJs[]): void {\n  if (logClient.logLevel <= FirebaseLogLevel.DEBUG) {\n    const args = obj.map(argToString);\n    logClient.debug(`Firestore (${SDK_VERSION}) [${tag}]: ${msg}`, ...args);\n  }\n}\n\nexport function error(msg: string, ...obj: AnyJs[]): void {\n  if (logClient.logLevel <= FirebaseLogLevel.ERROR) {\n    const args = obj.map(argToString);\n    logClient.error(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj: AnyJs): string | AnyJs {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    const platform = PlatformSupport.getPlatform();\n    try {\n      return platform.formatJSON(obj);\n    } catch (e) {\n      // Converting to JSON failed, just log the object directly\n      return obj;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}