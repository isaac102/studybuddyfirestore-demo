{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\nimport { DocumentKey } from './document_key';\n\nvar Document =\n/** @class */\nfunction () {\n  function Document(key, version, data, options) {\n    this.key = key;\n    this.version = version;\n    this.data = data;\n    this.hasLocalMutations = options.hasLocalMutations;\n  }\n\n  Document.prototype.field = function (path) {\n    return this.data.field(path);\n  };\n\n  Document.prototype.fieldValue = function (path) {\n    var field = this.field(path);\n    return field ? field.value() : undefined;\n  };\n\n  Document.prototype.value = function () {\n    return this.data.value();\n  };\n\n  Document.prototype.isEqual = function (other) {\n    return other instanceof Document && this.key.isEqual(other.key) && this.version.isEqual(other.version) && this.data.isEqual(other.data) && this.hasLocalMutations === other.hasLocalMutations;\n  };\n\n  Document.prototype.toString = function () {\n    return \"Document(\" + this.key + \", \" + this.version + \", \" + this.data.toString() + \", \" + (\"{hasLocalMutations: \" + this.hasLocalMutations + \"})\");\n  };\n\n  Document.compareByKey = function (d1, d2) {\n    return DocumentKey.comparator(d1.key, d2.key);\n  };\n\n  Document.compareByField = function (field, d1, d2) {\n    var v1 = d1.field(field);\n    var v2 = d2.field(field);\n\n    if (v1 !== undefined && v2 !== undefined) {\n      return v1.compareTo(v2);\n    } else {\n      return fail(\"Trying to compare documents on fields that don't exist\");\n    }\n  };\n\n  return Document;\n}();\n\nexport { Document };\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\n\nvar NoDocument =\n/** @class */\nfunction () {\n  function NoDocument(key, version) {\n    this.key = key;\n    this.version = version;\n  }\n\n  NoDocument.prototype.toString = function () {\n    return \"NoDocument(\" + this.key + \", \" + this.version + \")\";\n  };\n\n  NoDocument.prototype.isEqual = function (other) {\n    return other && other.version.isEqual(this.version) && other.key.isEqual(this.key);\n  };\n\n  NoDocument.compareByKey = function (d1, d2) {\n    return DocumentKey.comparator(d1.key, d2.key);\n  };\n\n  return NoDocument;\n}();\n\nexport { NoDocument };","map":{"version":3,"sources":["../src/model/document.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { fail } from '../util/assert';\nimport { AnyJs } from '../util/misc';\n\nimport { DocumentKey } from './document_key';\nimport { FieldValue, JsonObject, ObjectValue } from './field_value';\nimport { FieldPath } from './path';\n\nexport interface DocumentOptions {\n  hasLocalMutations: boolean;\n}\n\nexport class Document {\n  readonly hasLocalMutations: boolean;\n\n  constructor(\n    readonly key: DocumentKey,\n    readonly version: SnapshotVersion,\n    readonly data: ObjectValue,\n    options: DocumentOptions\n  ) {\n    this.hasLocalMutations = options.hasLocalMutations;\n  }\n\n  field(path: FieldPath): FieldValue | undefined {\n    return this.data.field(path);\n  }\n\n  fieldValue(path: FieldPath): AnyJs {\n    const field = this.field(path);\n    return field ? field.value() : undefined;\n  }\n\n  value(): JsonObject<AnyJs> {\n    return this.data.value();\n  }\n\n  isEqual(other: Document | null | undefined): boolean {\n    return (\n      other instanceof Document &&\n      this.key.isEqual(other.key) &&\n      this.version.isEqual(other.version) &&\n      this.data.isEqual(other.data) &&\n      this.hasLocalMutations === other.hasLocalMutations\n    );\n  }\n\n  toString(): string {\n    return (\n      `Document(${this.key}, ${this.version}, ${this.data.toString()}, ` +\n      `{hasLocalMutations: ${this.hasLocalMutations}})`\n    );\n  }\n\n  static compareByKey(d1: MaybeDocument, d2: MaybeDocument): number {\n    return DocumentKey.comparator(d1.key, d2.key);\n  }\n\n  static compareByField(field: FieldPath, d1: Document, d2: Document): number {\n    const v1 = d1.field(field);\n    const v2 = d2.field(field);\n    if (v1 !== undefined && v2 !== undefined) {\n      return v1.compareTo(v2);\n    } else {\n      return fail(\"Trying to compare documents on fields that don't exist\");\n    }\n  }\n}\n\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\nexport class NoDocument {\n  constructor(readonly key: DocumentKey, readonly version: SnapshotVersion) {}\n\n  toString(): string {\n    return `NoDocument(${this.key}, ${this.version})`;\n  }\n\n  isEqual(other: NoDocument): boolean {\n    return (\n      other &&\n      other.version.isEqual(this.version) &&\n      other.key.isEqual(this.key)\n    );\n  }\n\n  static compareByKey(d1: MaybeDocument, d2: MaybeDocument): number {\n    return DocumentKey.comparator(d1.key, d2.key);\n  }\n}\n\n/**\n * A union type representing either a full document or a deleted document.\n * The NoDocument is used when it doesn't exist on the server.\n */\nexport type MaybeDocument = Document | NoDocument;\n"]},"metadata":{},"sourceType":"module"}